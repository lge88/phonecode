#!/usr/bin/env python
import sys, os

class StringPartitionIter:
  def __init__(self, s, start=0):
    self._cursor = start
    self._s = s

  def __iter__(self):
    return self

  def next(self):
    if self._cursor > len(self._s):
      raise StopIteration

    item = (self._s[:self._cursor], self._s[self._cursor:])
    self._cursor += 1
    return item

class Translator:
  def __init__(self, phone_file, words_file):
    self._phone_file = phone_file
    self._words_file = words_file
    self._letter_to_digit_map = None
    self._words_list = None
    self._digits_to_words_map = None

  def _get_letter_to_digit_map(self):
    if not self._letter_to_digit_map:
      l2d = {}
      for line in open(self._phone_file, 'r'):
        digit, letters = line.strip().split(',')
        for letter in letters:
          l2d[letter.upper()] = digit
      self._letter_to_digit_map = l2d
    return self._letter_to_digit_map

  def _letter_to_digit(self, letter):
    l2d = self._get_letter_to_digit_map()
    letter_upper = letter.upper()
    return l2d[letter_upper] if l2d.has_key(letter_upper) else ''

  def _get_words_list(self):
    if not self._words_list:
      self._words_list = [line.strip() for line in open(self._words_file, 'r')]
    return self._words_list

  def _get_digits_to_words_map(self):
    if not self._digits_to_words_map:
      wl, d2w = self._get_words_list(), {}
      for word in wl:
        digits = self._encode(word)
        if not d2w.has_key(digits):
          d2w[digits] = []
        d2w[digits].append(word)
      self._digits_to_words_map = d2w

    return self._digits_to_words_map

  def _encode(self, sentence):
    return ''.join([self._letter_to_digit(letter) for letter in sentence])

  def _decode(self, digits):
    if len(digits) == 0:
      return [[]]

    d2w, res = self._get_digits_to_words_map(), []
    for prefix, rest in StringPartitionIter(digits, 1):
      first_words = d2w[prefix] if d2w.has_key(prefix) else None
      if first_words:
        partitial_solutions = self._decode(rest)
        for first_word in first_words:
          for partitial_solution in partitial_solutions:
            res.append([first_word] + partitial_solution)
    return res

  def encode(self, sentence):
    return sentence + ': ' + self._encode(sentence)

  def decode(self, digits):
    sentences = self._decode(digits)
    return '\n'.join([digits + ': ' + ' '.join(s) for s in sentences])

def parse_options(argv):
  root = os.path.dirname(os.path.realpath(__file__))
  options = {
    'phone': os.path.realpath(root + '/../phone.txt'),
    'word': os.path.realpath(root + '/../words.txt'),
    'reverse': False
  }

  while len(argv) > 0:
    arg = argv.pop(0)

    if arg == '-p' or arg == '--phone-file':
      options['phone'] = argv.pop(0)
    elif arg == '-w' or arg == '--words-file':
      options['word'] = argv.pop(0)
    elif arg == '-r' or arg == '--reverse':
      options['reverse'] = True
    else:
      print 'Unknow flag ' +  arg + '.'
      sys.exit(1)

  return options

def main():
  argv = sys.argv[1:]
  options = parse_options(argv)

  translator = Translator(options['phone'], options['word'])
  translateLine = translator.encode if options['reverse'] else translator.decode

  line = sys.stdin.readline().strip()
  while line:
    print translateLine(line)
    line = sys.stdin.readline().strip()

if __name__ == '__main__':
  main()
